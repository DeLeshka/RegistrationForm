Приложение сделано на c++/cli, поэтому, если у вас не установлены необходимые компоненты, в частности .NET 4.7.2, по этой ссылке будет инсталлятор: 
https://drive.google.com/drive/folders/1NU-EexUp5loRMUeXKbD99_RhbEfWMDZR?usp=sharing
Должен сразу отметить, что требование о подсветке и надписях для каждого поля было воспринято как подлежащее к исполнению только тогда, когда на элементе нет фокуса, поэтому 
и подсветка, и надпись под ранее некорректно заполенным полем при выборе его в фокус пропадет.
Основная логика проверки и хранения корректности полей инкапсулирована в синглтоне tester, который может проводить необходимые проверки и отвечать 
на запрос о корректности того или иного поля.
Все проверки проходят для каждого конкретного поля в момент выхода из фокуса, при попытке нажать на кнопку проходят абсолютно все проверки.
Для полей с ограничением размера было установлено свойство MaxLength на соответствующее значение.
Текстовые поля проходят проверку на корректность заполнения соответствующим регулярным выражением:
* для Email R"(^[^\\#$%]+@[^\#$%]+.[^\#$%]+$)" , где требуется 3 блока любых символов, кроме запрещенных, разделенных сначала '@', а потом '.' ;
* для имени и фамилии (R"([a-zA-Zа-яА-я0-9]+)", что равнозначно отказу от спецсимволов (цифры не входят в спецсимволы, поэтому их ввод разрешен);
* для пароля R"((?=.*[0-9])(?=.*[!@#$%^&*]).{8,})", что обозначает "хотя бы одна цифра", "хотя бы один спецсимвол" и "общая длина не менее 8".
Проверка подтверждения пароля проводится простым сравнением, если поле пустое, выводится соответствующее предупреждение.
При нажатии на кнопку сначала выполняется проверка положения checkBox, если он находится в включенном состоянии, то производится повторная проверка всех полей.
В случае, когда хоть одно поле заполнено неверно, над кнопкой выводится список непрошедших проверку полей.
В противном, выводится сообщение о переходе в личный кабинет, реализовывать который я не стал, так как посчитал, что это не относится к сути задания.
И хоть сама логика проверок абсолютно тривиальна, отрисовка рамок стала главным испытанием, породившим множество проблем и костылей.
Дело в том, что в WinForms у textbox нет такого полезного свойства, как BorderColor. И если в С# данную проблему можно исправить унаследованием собственного типа границ
от стандартного, в рамках C++/cli это не представляется возможным. 
Проблема была решена отключением стандартных границ и рисованием собственных вручную. Для выбора корректного цвета tester'у была дана обязанность отслеживать, проверялось 
ли поле ранее, чтобы поля, до которых еще не дошла проверка, отрисовывались должным образом.
Надеюсь на Ваш фидбек и подсказки, как можно было решить проблему с границами лучше.
